#include<iostream>
#include<sstream>
#include<TFile.h>
#include<TCanvas.h>
#include<TH1.h>
#include<TStyle.h>
#include<string>
#include <algorithm>
#include <TLegend.h>
#include<TStyle.h>
#include<TSystem.h>

using namespace std;

////////////////////////////////////////////////////////
// Created this to add up the histograms to make the
// MET model predictions of MET. This adds up MET All/
// MET after cuts/Met Sig hists.
////////////////////////////////////////////////////////
//fMetSigCalib_estimate_njet0
//			if (j==1) name = "fMetSigCalib_estimate_njet0";
//			//fMetSigCalib_estimate_njet1
//			if (j==2) name = "fMetSigCalib_estimate_njet1";
//			if (j==3) name = "fMetSigCalib_estimate_njet2";
//			if (j==4) name = "fMetSigCalib_estimate_njet3";
//			if (j==5) name = "fMetSigCalib_estimate_njet4";



void MergeMetHists(const int iNfiles, const std::string name) 
{
	assert (iNfiles>0 && "Specify number of files to process");
	assert (name.length() >0 && "Specify a hist name process");
	std::cout << "Reading from " << std::endl;
	gSystem->pwd();
	std::cout << "" << std::endl;
	std::string data_path("/Ana/JetFilterV2/Hist/Ana_data/");
	std::string bg_path("/Ana/JetFilterV2/Hist/Ana_bckg/");
	

	gStyle->SetOptStat("nemrou");
	
	TFile *f;
	TH1* hist_data;
	TH1* hist_bg;
	double sum=0;
	double sum0=0;
	
	for (int i = 1; i<= iNfiles; ++i) 
	{
		std::stringstream file;
		file << "MetTest_PhotonMC.root_"<< i;
	
		f = new TFile (file.str().c_str());

		if (f->IsZombie()) 
		{
			std::cout << "ERROR::File " << file.str() << "did not open! " << std::endl;
		} else {
				//std::cout << "File Added::";
				//f->Print();
		}

			TH1* temp_data = (TH1*) gDirectory->FindObjectAny(name.c_str());
			TH1* temp_data1 = (TH1*) gDirectory->FindObjectAny(name.c_str());

			assert (temp_data != NULL && "0 object not found!");
			assert (temp_data1 != NULL && "1 object not found!");

			sum += temp_data->GetEntries();
			sum0 += temp_data1->GetEntries();
			
			if (i==1)
			{
					hist_data = (TH1*) temp_data->Clone("data_copy");
					hist_bg = (TH1*) temp_data1->Clone("bg_copy");
			} else {
				hist_data->Add(temp_data);
				hist_bg->Add(temp_data1);
				delete f;
			}
	}
	assert (hist_data != NULL && "HIST_DATA null");
	assert (hist_bg != NULL && "HIST_DATA null");
//	TH1::SetDirectory(kFALSE);

	if (sum != hist_data->GetEntries()) std::cout << "sum=" << sum << " hits entries = " << hist_data->GetEntries() << " did not match!" << std::endl;
	
	if (sum0 != hist_bg->GetEntries()) std::cout << "sum0=" << sum0 << " hits entries = " << hist_bg->GetEntries() << " did not match!" << std::endl;

	new TCanvas();
	hist_data->Draw();
	hist_bg->Draw("same");




}

void MergeMetHists(int iNfiles=0) 
{
	MergeMetHists(iNfiles, "Met");
	MergeMetHists(iNfiles, "MetAll");
	MergeMetHists(iNfiles, "MetSig");
}

