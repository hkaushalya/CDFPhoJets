Index: MakeHistLogAndRatio.C
===================================================================
RCS file: /cdf/code/cdfcvs/run2/samantha/RootTools/MakeHistLogAndRatio.C,v
retrieving revision 1.5
diff -r1.5 MakeHistLogAndRatio.C
16c16,18
< #include<cmath>
---
> #include <cmath>
> #include <memory>
> #include <iomanip>
21c23,25
< TF1* get_error_function (const std::string which, unsigned jets, const std::string& sign = "+")
---
> //for debugging only  functions ------------------------
> 
> void DebugTwoHistRatio(const TH1* hist1, const TH1* hist2)
23c27
< 	float val0 = 0, val1 = 0, width = 0, power = 2;
---
> 	assert ((hist1 != NULL &&  hist2 != NULL) && "DebugStatErr got a NULL hist");
25,42c29,46
< 	if ((jets==1) && (which=="InvMass")) {
< 		val0 = 0.15;
< 		val1 = 1.5;
< 		width = 1000;
< 		power = 3.0;
< 	}
< 	if ((jets==2) && (which=="InvMass")) {
< 		val0 = 0.2;
< 		val1 = 1.2;
< 		width = 900;
< 		power = 3.1;
< 	}
< 	if ((jets==2) && (which=="PhoJetsInvMass")) {
< 		val0 = 0.1;
< 		val1 = 0.8;
< 		width = 900;
< 		power = 3.1;
< 	}
---
> 	TH1* h1 = (TH1*) hist1->Clone("h1copy");
> 	TH1* h2 = (TH1*) hist2->Clone("h2copy");
> 	h1->Scale(1./(1.0 * h1->Integral()));
> 	h2->Scale(1./(1.0 * h2->Integral()));
> 	
> 	std::cout << "bin\trat" << std::endl;
> 	
> 	for (int bin=1; bin <= h1->GetNbinsX(); ++bin)
> 	{
> 		if (h1->GetBinContent(bin))
> 		{
> 			double cval = h1->GetBinContent(bin);
> 			double uval = h2->GetBinContent(bin);
> 			//c->SetBinContent(bin, uval/cval - 1);
> 			//cdhistrat->SetBinContent(bin, dval/cval - 1);
> 			float rat = uval/cval - 1;
> 			std::cout << bin << "\t" << rat << std::endl;
> 		}
44,48d47
< 	if ((jets==2) && (which=="JetsInvMass")) {
< 		val0 = 0.15;
< 		val1 = 1.4;
< 		width = 1200;
< 		power = 3.1;
49a49,68
> 	
> 	
> 	h2->Add(h1,-1);
> 	h2->Divide(h1);
> 	h2->SetTitle("#gamma sideband and #gamma MC compared (each normlaized to unity before comparison)");
> 	new TCanvas();
> 	gPad->SetGridx();
> 	gPad->SetGridy();
> 	h2->SetMarkerStyle(20);
> 	h2->SetMarkerColor(kBlue);
> 	h2->Draw("P");
> 	
>   TLegend *leg = new TLegend (0.7,0.6,0.9,0.9);
>   leg->SetTextFont(42);
>   leg->SetTextSize(0.03);
>   
>   leg->AddEntry(h2,"#frac{#gamma MC}{Sideband} - 1");
>   leg->Draw();
>  
> }
51,56d69
< 	if ((jets==1) && (which=="PhotonEt")) {
< 		val0 = 0.15;
< 		val1 = 1.5;
< 		width = 500;
< 		power = 3.0;
< 	}
58,63c71,76
< 	if ((jets==2) && (which=="PhotonEt")) {
< 		val0 = 0.14;
< 		val1 = 1.5;
< 		width = 500;
< 		power = 3.0;
< 	}
---
> //plots the Stat err for each hist
> void DebugStatErr(const TH1* zeejet, const TH1* zmmjet,
> 						const TH1* zttjet, const TH1* wenjet, 
> 						const TH1* wmnjet, const TH1* wtnjet, 
> 						const TH1* mcphojet,  const TH1* qcdjet, const TH1* sumbg = 0)
> {
66,71c79,82
< 	if ((jets==1) && (which=="NJet")) {
< 		val0 = 0.07;
< 		val1 = 0.75;
< 		width = 10;
< 		power = 2;
< 	}
---
> 	assert ((zeejet != NULL && zmmjet != NULL && zttjet != NULL 
> 				&& wenjet != NULL && wmnjet != NULL && wtnjet != NULL 
> 				&& mcphojet != NULL)
> 				&& "DebugStatErr got a NULL hist");
73,84d83
< 	if ((jets==1) && (which=="Ht")) {
< 		val0 = 0.14;
< 		val1 = 1.5;
< 		width = 900;
< 		power = 3.0;
< 	}
< 	if ((jets==2) && (which=="Ht")) {
< 		val0 = 0.14;
< 		val1 = 1.5;
< 		width = 900;
< 		power = 3.0;
< 	}
85a85,92
> 	TH1* zee = (TH1*) zeejet->Clone("zeejet_copy");
> 	TH1* zmm = (TH1*) zmmjet->Clone("zmmjet_copy");
> 	TH1* ztt = (TH1*) zttjet->Clone("zttjet_copy");
> 	TH1* wen = (TH1*) wenjet->Clone("wenjet_copy");
> 	TH1* wmn = (TH1*) wmnjet->Clone("wmnjet_copy");
> 	TH1* wtn = (TH1*) wtnjet->Clone("wtnjet_copy");
> 	TH1* phomc = (TH1*) mcphojet->Clone("phomcjet_copy");
> 	TH1* qcd = (TH1*) qcdjet->Clone("qcd_copy");
86a94,98
> 	TH1* sumBG=0;
> 	if (sumbg)
> 	{
> 		sumBG = (TH1*) sumbg->Clone("hist_err_copy");
> 	}
88c100,101
< 	if (width > 0)
---
> 	//assuming all hists are rebinned (same sizes)
> 	for (int i=1; i <=zee->GetNbinsX();++i)
90,99c103,151
< 		std::ostringstream myname, func;
< 		myname << "eq_" << jets << which;
< 		//func << val0 << " + " << (val1 - val0) / pow (width, power) << " *pow(x," << power << ")";
< 		func << sign << val0 << sign << (val1 - val0) / pow (width, power) << " *pow(x," << power << ")";
< 		return (new TF1 (myname.str().c_str(), func.str().c_str(), 0, width));
< 	};
< 	std::cout << "couldn't find errors for " << which << " " << jets << " jets" << std::endl;
< 	assert (false);
< 	return NULL;
< };
---
> 		if (zee->GetBinContent(i))
> 		{
> 			zee->SetBinContent(i, zee->GetBinError(i)/zee->GetBinContent(i));
> 			zee->SetBinError(i,0);
> 		}
> 		if (zmm->GetBinContent(i))
> 		{
> 			zmm->SetBinContent(i, zmm->GetBinError(i)/zmm->GetBinContent(i));
> 			zmm->SetBinError(i,0);
> 		}
> 		if (ztt->GetBinContent(i))
> 		{
> 			ztt->SetBinContent(i, ztt->GetBinError(i)/ztt->GetBinContent(i));
> 			ztt->SetBinError(i,0);
> 		}
> 		if (wen->GetBinContent(i))
> 		{
> 			wen->SetBinContent(i, wen->GetBinError(i)/wen->GetBinContent(i));
> 			wen->SetBinError(i,0);
> 		}
> 		if (wmn->GetBinContent(i))
> 		{
> 			wmn->SetBinContent(i, wmn->GetBinError(i)/wmn->GetBinContent(i));
> 			wmn->SetBinError(i,0);
> 		}
> 		if (wtn->GetBinContent(i))
> 		{
> 			wtn->SetBinContent(i, wtn->GetBinError(i)/wtn->GetBinContent(i));
> 			wtn->SetBinError(i,0);
> 		}
> 		if (phomc->GetBinContent(i))
> 		{
> 			phomc->SetBinContent(i, phomc->GetBinError(i)/phomc->GetBinContent(i));
> 			phomc->SetBinError(i,0);
> 		}
> 		if (qcd->GetBinContent(i))
> 		{
> 			qcd->SetBinContent(i, qcd->GetBinError(i)/qcd->GetBinContent(i));
> 			qcd->SetBinError(i,0);
> 		}
> 		if (sumBG)
> 		{
> 			if (sumBG->GetBinContent(i))
> 			{
> 				sumBG->SetBinContent(i, sumBG->GetBinError(i)/sumBG->GetBinContent(i));
> 				sumBG->SetBinError(i,0);
> 			}
> 		}
> 	}
100a153,176
> 	zee->SetMarkerStyle(20);
> 	zmm->SetMarkerStyle(22);
> 	ztt->SetMarkerStyle(23);
> 	wen->SetMarkerStyle(20);
> 	wmn->SetMarkerStyle(22);
> 	wtn->SetMarkerStyle(23);
> 	phomc->SetMarkerStyle(21);
> 	qcd->SetMarkerStyle(21);
> 	if (sumBG)
> 	{
> 		sumBG->SetMarkerStyle(21);
> 		sumBG->SetMarkerColor(kCyan);
> 	}
> 
> 	zee->SetMarkerColor(kRed);
> 	zmm->SetMarkerColor(kRed);
> 	ztt->SetMarkerColor(kRed);
> 	wen->SetMarkerColor(kBlue);
> 	wmn->SetMarkerColor(kBlue);
> 	wtn->SetMarkerColor(kBlue);
> 	phomc->SetMarkerColor(kGreen);
> 	qcd->SetMarkerColor(kYellow);
> 	
> 	zee->SetTitle("Relative Statistical Error in MC samples before scaling");
101a178,204
>   TLegend *leg = new TLegend (0.7,0.6,0.9,0.9);
>   leg->SetTextFont(42);
>   leg->SetTextSize(0.03);
>   
>   leg->AddEntry(zee,"Zee");
>   leg->AddEntry(zmm,"Zmm");
>   leg->AddEntry(ztt,"Ztt");
>   leg->AddEntry(wen,"Wen");
>   leg->AddEntry(wmn,"Wmn");
>   leg->AddEntry(wtn,"Wtn");
>   leg->AddEntry(phomc,"#gamma MC");
>   leg->AddEntry(qcd,"QCD");
>   if (sumBG) leg->AddEntry(sumBG,"Tot. from Sum BG");
> 	
> 	new TCanvas();
> 	gPad->SetGridx();
> 	gPad->SetGridy();
> 	zee->Draw("P");
> 	zmm->Draw("P SAME");
> 	ztt->Draw("P SAME");
> 	wen->Draw("P SAME");
> 	wmn->Draw("P SAME");
> 	wtn->Draw("P SAME");
> 	phomc->Draw("P SAME");
> 	qcd->Draw("P SAME");
>   	if (sumBG) sumBG->Draw("P SAME");
> 	leg->Draw();	
102a206
> }
104c208,209
< TF1* get_fit_function(const std::string which, const TH1* hist,int jets, std::string func, float min, float max, int pm=1)
---
> //dumps only one bin content of a hist
> void DumpHistBin(TH1* hist, const int bin=0)
106c211
< 	assert (hist != NULL && "hist is a null pointer");
---
> 	assert (hist != NULL && "DumpHistBin:: got null pointer!");
108,109c213,214
< 	TH1* test_hist = dynamic_cast<TH1*>(hist->Clone ("fit"));
< 	for (unsigned bin = 1; bin <= hist->GetNbinsX(); ++ bin)
---
> 	std::cout << setw(8) << "bin"<< setw(16) << "lo/up edges"<<  setw(8) << "val" << setw(8) << "err" << std::endl; 
> 	if (bin>=0 && bin <= hist->GetNbinsX())
111,112c216,219
< 		test_hist->SetBinContent(bin, pm * hist->GetBinError(bin));
< 		test_hist->SetBinError(bin, hist->GetBinError(bin)* 0.1);
---
> 		std::cout << setw(8) << bin << setw(8) << hist->GetBinLowEdge(bin) 
> 					<< setw(1) << ", " << setw(4) << hist->GetXaxis()->GetBinUpEdge(bin)
> 					<< setw(10) << hist->GetBinContent(bin) << ", " << setw(6)
> 					<< hist->GetBinError(bin) << std::endl;
113a221
> }
115c223,228
< 	test_hist->SetDirectory(0);
---
> //dumps the all the bin contents of a hist
> void Debug_DumpHist(TH1* hist, const int iCallerLine, const int Nbins = 0)
> {
> 	assert (hist != NULL && "Debug_DumpHist:: got null pointer!");
> 	assert (( hist->GetNbinsX() >= Nbins && Nbins>=0) 
> 				&& "Debug_DumpHist:: reuested invalid number of Nbins");
117,125d229
< 	std::cout << " function fit range=" << min << "," << max << std::endl;
< 	test_hist->Fit(func.c_str(),"","", min, max);
< 	
< 	TList *list = test_hist->GetListOfFunctions();
< 	TIterator *it = list->MakeIterator();
< 	
< 	float x_min = test_hist->GetBinLowEdge(1);
< 	float x_max = test_hist->GetXaxis()->GetXmax();
< 	
127,129c231,232
< 	TF1* tf = new TF1("fit_func",x_min,x_max, 100);
< 	
< 	while (tf = (TF1*) it->Next() )
---
> 	std::cout << __FUNCTION__<<  "::Caller Line#" << iCallerLine;
> 	if (Nbins>=0)
131,133c234,236
< 		Double_t p1[5];
< 		tf->GetParameters(p1);
< 		if (tf) break;
---
> 		std::cout << " - First " << Nbins << " non-zero bins dump for :" << std::endl;
> 	} else {
> 		std::cout << " - All non-zero bins dump for :" << std::endl;
135,138c238,240
< 	
< 	assert(tf!=NULL && "fit function not found!");
< 	if (tf) return tf;
< }
---
> 	hist->Print();
> 	std::cout << setw(8) << "bin"<< setw(16) << "lo/up edges"<<  setw(10) 
> 				 << "val" << setw(10) << "err" << std::endl; 
141,164c243
< 
< void GetCosmicErr(std::vector<float>& ErrVec, const TH1 *hist , bool debug)
< {
< 	if (debug) std::cout << "IN COSMIC ERROR"<< std::endl;
< 	assert (hist!=NULL && "hist is null");
< 	for (int i=1; i <= hist->GetNbinsX(); i++) {
< 		float bin = hist->GetBinContent(i);
< 		float err = 0;
< 		if (bin) err = 1 / sqrt(bin);		//take stat error as the syst
< 		ErrVec.push_back(err);
< 		if (debug) std::cout << "halo bin[" <<i << "]=" << bin << std::endl;
< 	}
< }
< 
< void GetHaloErr(std::vector<float>& ErrVec, const TH1 *hist, bool debug=false)
< {
< 	assert(hist!=NULL && "hist is null!");
< 	for (int i=1; i <= hist->GetNbinsX(); i++) {
< 		float bin = hist->GetBinContent(i);
< 		float err = bin * 0.5;		//take 50% to be the syst
< 		ErrVec.push_back(err);
< 		if (debug) std::cout << "halo err [" << i << "]="<< err <<std::endl;
< 	}
< 	if (debug)
---
> 	for  (int bin=0; bin <= hist->GetNbinsX(); ++bin)
166,167c245,254
< 		std::cout << "halo err arr size = " << ErrVec.size() << std::endl;
< 		std::cout << "\n\n\n i am out" << std::endl;
---
> 		if (hist->GetBinContent(bin))
> 		{
> 			std::cout << setiosflags(ios::fixed) << setprecision(1) 
> 				<< setw(8) << bin << setw(8) << hist->GetBinLowEdge(bin) 
> 				<< setw(1) << ", " << setw(4) << hist->GetXaxis()->GetBinUpEdge(bin)
> 				<< setw(12) << hist->GetBinContent(bin) << ", " << setw(10)
> 				<< hist->GetBinError(bin) << std::endl;
> 		}
> 		//dump all bin if Nbins==0 (default)
> 		if (bin>=Nbins && Nbins>0) break;
172c259,265
< void MakeHist(std::vector<float> contents, const TH1* hist_err , std::string title="DEBUG plot")
---
> //-----------------------------------------------------------------------------
> void QuickDebug(const TH1* halojet, const  TH1* zeejet, const TH1* zmmjet,
> 					const TH1* zttjet, const TH1* wenjet, const 	TH1* wmnjet,
> 					const TH1* wtnjet, const  TH1* cosmicjet, const  TH1* qcdjet,
> 					const TH1* mcphojet, const  TH1* qcdjet_100, const  TH1* phojet)
> //QuickDebug( halojet,  zeejet, zmmjet, zttjet, wenjet, wmnjet,
> 					//wtnjet,  cosmicjet,  qcdjet,  mcphojet,  qcdjet_100,  phojet);
174,176d266
< 	assert(hist_err != NULL && "hist is null"); 
< 	assert((unsigned)contents.size() == (unsigned)hist_err->GetNbinsX() && "size of contetns does not match Nbins in hist");
< 	TH1* hist = (TH1*) hist_err->Clone("err_copy");
178c268,271
< 	for (int i=1; i<=hist->GetNbinsX(); ++i)
---
> 
> 	assert (halojet != NULL && "halojet hist is null@QuickDebug()");
> 	//assuming all hists are rebinned (same sizes)
> 	for (int i=1; i <=halojet->GetNbinsX();++i)
180,181c273,316
< 		hist->SetBinContent(i,contents.at(i-1));
< 		hist->SetBinError(i,0);
---
> 		if (phojet->GetBinContent(i))
> 		{
> 			std::cout << "bin " << i << "[" << halojet->GetBinLowEdge(i) << ", " << 
> 						halojet->GetXaxis()->GetBinUpEdge(i) << "]" << std::endl;
> 			std::cout <<   " pho jet  [" << phojet->GetBinContent(i) << " / " 
> 												<< phojet->GetBinError(i) << " / " 
> 												<< sqrt(phojet->GetBinContent(i))
> 						<< "]\n qcd100   [" << qcdjet_100->GetBinContent(i) << " / " 
> 												<< qcdjet_100->GetBinError(i)   << " / " 
> 												<< sqrt(qcdjet_100->GetBinContent(i))
> 						<< "]\n mcpho    [" << mcphojet->GetBinContent(i) << " / " 
> 												<< mcphojet->GetBinError(i)   << " / " 
> 												<< sqrt(mcphojet->GetBinContent(i))
> 						<< "]\n qcdjet   [" << qcdjet->GetBinContent(i) << " / " 
> 												<< qcdjet->GetBinError(i)   << " / " 
> 												<< sqrt(qcdjet->GetBinContent(i))
> 						<< "]\n cosmicjet[" << cosmicjet->GetBinContent(i) << " / " 
> 												<< cosmicjet->GetBinError(i)   << " / " 
> 												<< sqrt(cosmicjet->GetBinContent(i))
> 						<< "]\n wtnjet   [" << wtnjet->GetBinContent(i) << " / " 
> 												<< wtnjet->GetBinError(i)   << " / " 
> 												<< sqrt(wtnjet->GetBinContent(i))
> 						<< "]\n wmnjet   [" << wmnjet->GetBinContent(i) << " / " 
> 												<< wmnjet->GetBinError(i)   << " / " 
> 												<< sqrt(wmnjet->GetBinContent(i))
> 						<< "]\n wenjet   [" << wenjet->GetBinContent(i) << " / " 
> 												<< wenjet->GetBinError(i)   << " / " 
> 												<< sqrt(wenjet->GetBinContent(i))
> 						<< "]\n zttjet   [" << zttjet->GetBinContent(i) << " / " 
> 												<< zttjet->GetBinError(i)   << " / " 
> 												<< sqrt(zttjet->GetBinContent(i))
> 						<< "]\n zmmjet   [" << zmmjet->GetBinContent(i) << " / " 
> 												<< zmmjet->GetBinError(i)   << " / " 
> 												<< sqrt(zmmjet->GetBinContent(i))
> 						<< "]\n zeejet   [" << zeejet->GetBinContent(i) << " / " 
> 												<< zeejet->GetBinError(i)   << " / " 
> 												<< sqrt(zeejet->GetBinContent(i))
> 						<< "]\n halojet  [" << halojet->GetBinContent(i) << " / " 
> 												<< halojet->GetBinError(i)   << " / " 
> 												<< sqrt(halojet->GetBinContent(i))
> 						<< "]\n" << std::endl;  
> 			
> 			if (i == 9) break;
> 		}
183a319,338
> 
> 	assert (phojet != NULL && "cphohist is null");
> 	
> 	TH1* chist = (TH1*) halojet->Clone("halojet_copy");
> 	TH1* cphojet = (TH1*) phojet->Clone("phojet_copy");
> 
> 	assert (chist != NULL && "chist null!");
> 	assert (cphojet != NULL && "cphohist is null");
> 	chist->Add(zeejet,1);
> 	chist->Add(zmmjet,1);
> 	chist->Add(zttjet,1);
> 	chist->Add(wenjet,1);
> 	chist->Add(wmnjet,1);
> 	chist->Add(wtnjet,1);
> 	chist->Add(cosmicjet,1);
> 	chist->Add(qcdjet,1);
> 	chist->Add(mcphojet,1);
> 
> 	cphojet->SetLineColor(kBlue);
> 
185,187c340,343
< 	hist->SetTitle (title.c_str());
< 	hist->SetMarkerStyle(kPlus);
< 	hist->Draw("P");
---
> 	gPad->SetLogy();
> 	cphojet->Draw();
> 	chist->Draw("same");
> 	std::cout << "RETURNING FROM " << __FUNCTION__ << std::endl; 
190c346,347
< void DebugQcdMcMix(const TH1* hist_varyMcQcdMix,const TH1* hist_err, const TH1* phojet)
---
> //-----------------------------------------------------------------------------
> void DebugQcdMcMix(const TH1* hist_varyMcQcdMix,const TH1* hist_err)
241,244c398,403
< void QuickDebug(const TH1* halojet,const  TH1* zeejet,const TH1* zmmjet,const TH1* zttjet,const TH1* wenjet,
< 				const 	TH1* wmnjet,const TH1* wtnjet,const  TH1* cosmicjet,const  TH1* qcdjet,const  TH1* mcphojet,const  TH1* qcdjet_100,const  TH1* phojet)
< //QuickDebug( halojet,  zeejet, zmmjet, zttjet, wenjet, wmnjet,
< 					//wtnjet,  cosmicjet,  qcdjet,  mcphojet,  qcdjet_100,  phojet);
---
> 
> //-----------------------------------------------------------------------------
> // assumes all three hists have a the same bin sizes
> void DebugJES(const TH1* hist, const TH1* jesup, const TH1* jesdown,
> 				 const int iLINE=0, const std::string title="",
> 				 const std::string filename = "")
246,247d404
< 	TH1* chist = (TH1*) halojet->Clone("halojet_copy");
< 	TH1* cphojet = (TH1*) cphojet->Clone("phojet_copy");
249,257c406,408
< 	chist->Add(zeejet,1);
< 	chist->Add(zmmjet,1);
< 	chist->Add(zttjet,1);
< 	chist->Add(wenjet,1);
< 	chist->Add(wmnjet,1);
< 	chist->Add(wtnjet,1);
< 	chist->Add(cosmicjet,1);
< 	chist->Add(qcdjet,1);
< 	chist->Add(mcphojet,1);
---
> 	assert(hist != NULL && "hist_err null!.");
> 	assert(jesup != NULL && "jesup null!.");
> 	assert(jesdown != NULL && "jesdown null!.");
259c410,664
< 	cphojet->SetLineColor(kBlue);
---
> 	TH1* chist = (TH1*) hist->Clone("hist_copy");
> 	TH1* cuhistrat = (TH1*) hist->Clone("hist_copy_uratio");
> 	TH1* cdhistrat = (TH1*) hist->Clone("hist_copy_dratio");
> 	TH1* uhist = (TH1*) jesup->Clone("jesup_copy");
> 	TH1* dhist = (TH1*) jesdown->Clone("jesdown_copy");
> 
> 	TCanvas *c1 = new TCanvas();
> 	double w = 1200;
> 	double h = 600;
> 	c1->SetCanvasSize(w,h);
> 	c1->SetWindowSize(w + (w - c1->GetWw()) + 20, h + (h - c1->GetWh())+30);
> 	c1->Divide(2,1);
> 	c1->cd(1);
> 	//gPad->SetLogy();
> 	gPad->SetTickx();
> 	gPad->SetTicky();
> 	gPad->SetGridx();
> 	gPad->SetGridy();
> 	chist->SetLineColor(kBlue);
> 	chist->SetMarkerColor(kBlue);
> 	chist->SetMarkerStyle (20);
> 	chist->SetMarkerSize(0.8);
> 	uhist->SetLineColor(kRed);
> 	uhist->SetMarkerColor(kRed);
> 	uhist->SetMarkerStyle (22);
> 	dhist->SetMarkerStyle (23);
> 	dhist->SetMarkerColor(kGreen);
> 	chist->SetMinimum(0.05);
> 	if (title.length()) chist->SetTitle(title.c_str());
> 	//find x max ann zoom-in
> 	double x_max = 0;
> 	for (int bin=chist->GetNbinsX(); bin>0; --bin)
> 	{
> 		if ( chist->GetBinContent(bin) || 
> 			  uhist->GetBinContent(bin) || 
> 			  dhist->GetBinContent(bin) )
> 		{
> 			x_max = chist->GetXaxis()->GetBinUpEdge(bin);
> 			break;
> 		}
> 	}
> 	assert (x_max > 0 && "DebugJES:: Max value for X axis retuned zero!");
> 	
> 	chist->GetXaxis()->SetRangeUser(0,x_max);
> 	chist->Draw("P");	
> 	uhist->Draw("sameP");	
> 	dhist->Draw("sameP");	
> 
> 	TLegend *leg = new TLegend (0.7,0.72,0.9,0.9);
> 	leg->SetTextFont(42);
> 	leg->SetTextSize(0.03);
> 	leg->SetBorderSize (1);
> 	leg->SetFillColor (10);
> 
> 	leg->AddEntry(chist,"CENTRAL");
> 	leg->AddEntry(uhist,"JES UP");
> 	leg->AddEntry(dhist,"JES DOWN");
> 	//leg->AddEntry(chist,"DATA");
> 	//leg->AddEntry(uhist,"PHO MC");
> 	//leg->AddEntry(dhist,"PHO SIDEBAND");
> 	//leg->AddEntry(chist,"Background");
> 	//leg->AddEntry(chist,"FakeFrac+#sigma");
> 	//leg->AddEntry(uhist,"Scaled Pho MC");
> 	//leg->AddEntry(uhist,"Scaled Sideband");
> 	//leg->AddEntry(dhist,"PHO SIDEBAND");
> 	leg->Draw();
> 
> 	//now make aratio hist of the differeces
> 	//zero out the two ratio hist (up/down)
> 	for (int bin=0;bin <= cuhistrat->GetNbinsX()+1; ++bin)
> 	{
> 			cuhistrat->SetBinContent(bin, 0);
> 			cuhistrat->SetBinError(bin, 0);
> 			cdhistrat->SetBinContent(bin, 0);
> 			cdhistrat->SetBinError(bin, 0);
> 	}
> 	
> 	
> 	for (int bin=1; bin <= chist->GetNbinsX(); ++bin)
> 	{
> 		if (chist->GetBinContent(bin))
> 		{
> 			double cval = chist->GetBinContent(bin);
> 			double uval = uhist->GetBinContent(bin);
> 			double dval = dhist->GetBinContent(bin);
> 			if ( std::isnan(cval) || std::isnan(uval) ||  std::isnan(dval))
> 			{
> 				std::cout << __FUNCTION__ << ":" << __LINE__ 
> 							<< ": one or bin values returned NAN!" << std::endl;
> 			}
> 			
> 			cuhistrat->SetBinContent(bin, uval/cval - 1);
> 			cdhistrat->SetBinContent(bin, dval/cval - 1);
> 		}
> 
> 	}
> 	
> 	
> 	//new TCanvas();
> 	c1->cd(2);
> 	gPad->SetTickx();
> 	gPad->SetTicky();
> 	gPad->SetGridx();
> 	gPad->SetGridy();
> 
> 	cuhistrat->SetMarkerStyle(22);
> 	cdhistrat->SetMarkerStyle(23);
> 	cuhistrat->SetMarkerColor(kRed);
> 	cdhistrat->SetMarkerColor(kGreen);
> 	
> 	cuhistrat->SetMinimum (-1.0);
> 	cuhistrat->SetMaximum (1.0);
> 	if (title.length()) cuhistrat->SetTitle(title.c_str());
> 	cuhistrat->GetXaxis()->SetRangeUser(0,x_max);
> 	cuhistrat->Draw("P");
> 	cdhistrat->Draw("P SAME");
> 	leg->Draw();
> 
> 	c1->cd();
> 	
> 	if (filename.length())
> 	{
> 		c1->cd();
> 		c1->Print(filename.c_str());
> 	}
> 
> 	//dump first few bins
> 	std::cout << __FUNCTION__<<  "::Caller Line#" << iLINE<< " - First 4 non-zero bins dump for :" << std::endl;
> 	std::cout << "CENTRAL - ";
> 	hist->Print();
> 	std::cout << "JES UP  - ";
> 	jesup->Print();
> 	std::cout << "JES DOWN- ";
> 	jesdown->Print();
> 	std::cout << setiosflags(ios::fixed) << setprecision(1) 
> 		<< setw(4) << "bin " << setw(12) << "lo/up edges" <<  setw(11) << "*central*" 
> 		<< setw(19) << "*jes up[diff]*" <<  setw(24) << "*jes down [diff]*"
> 		<< std::endl;
> 	int dumps = 0;
> 	for (int bin=1;bin <= chist->GetNbinsX()+1; ++bin)
> 	{
> 		if (chist->GetBinContent(bin))
> 		{
> 			double cval = chist->GetBinContent(bin);
> 			double uval = uhist->GetBinContent(bin);
> 			double dval = dhist->GetBinContent(bin);
> 			double udiff = cval - uval;
> 			double ddiff = cval - dval;
> 			std::cout << setw(4) << bin << setw(6) << hist->GetBinLowEdge(bin) 
> 				<< setw(1) << ", " << setw(4) << hist->GetXaxis()->GetBinUpEdge(bin)
> 				<< setw(13) << cval
> 				<< setw(12) << uval << "[ " << udiff << "]"
> 				<< setw(12) << dval << "[ " << ddiff << "]"
> 				<< std::endl;
> 			++dumps;
> 		}
> 		if (dumps>4) break;
> 	}
> }
> 
> //-----------------------------------------------------------------------------
> //debug only: make a error (ratio hist) with a given set of values
> void DebugMakeHist(std::vector<float> contents, const TH1* hist_err ,
> 					std::string title="DEBUG plot")
> {
> 	assert(hist_err != NULL && "hist is null"); 
> 	assert((unsigned)contents.size() == (unsigned)hist_err->GetNbinsX() 
> 					&& "size of contetns does not match Nbins in hist");
> 
> 	TH1* hist = (TH1*) hist_err->Clone("err_copy");
> 
> 	for (int i=1; i<=hist->GetNbinsX(); ++i)
> 	{
> 		hist->SetBinContent(i,contents.at(i-1));
> 		hist->SetBinError(i,0);
> 	}
> 
> 	new TCanvas();
> 	hist->SetTitle (title.c_str());
> 	hist->SetMarkerStyle(kPlus);
> 	hist->Draw("P");
> }
> 
> 
> 
> //end for debugging only functions  ------------------------
> 
> 
> //-----------------------------------------------------------------------------
> /// this generates a TF1 envelop function
> TF1* get_error_function (const std::string which, unsigned jets,
> 								const std::string& sign = "+")
> {
> 	float val0 = 0, val1 = 0, width = 0, power = 2;
> 
> 	if ((jets==1) && (which=="InvMass")) {
> 		val0 = 0.15;
> 		val1 = 1.5;
> 		width = 1000;
> 		power = 3.0;
> 	}
> 	if ((jets==2) && (which=="InvMass")) {
> 		val0 = 0.2;
> 		val1 = 1.2;
> 		width = 900;
> 		power = 3.1;
> 	}
> 	if ((jets==2) && (which=="PhoJetsInvMass")) {
> 		val0 = 0.1;
> 		val1 = 0.8;
> 		width = 900;
> 		power = 3.1;
> 	}
> 
> 	if ((jets==2) && (which=="JetsInvMass")) {
> 		val0 = 0.15;
> 		val1 = 1.4;
> 		width = 1200;
> 		power = 3.1;
> 	}
> 
> 	if ((jets==1) && (which=="PhotonEt")) {
> 		val0 = 0.15;
> 		val1 = 1.5;
> 		width = 500;
> 		power = 3.0;
> 	}
> 
> 	if ((jets==2) && (which=="PhotonEt")) {
> 		val0 = 0.14;
> 		val1 = 1.5;
> 		width = 500;
> 		power = 3.0;
> 	}
> 
> 
> 	if ((jets==1) && (which=="NJet")) {
> 		val0 = 0.07;
> 		val1 = 0.75;
> 		width = 10;
> 		power = 2;
> 	}
> 
> 	if ((jets==1) && (which=="Ht")) {
> 		val0 = 0.14;
> 		val1 = 1.5;
> 		width = 900;
> 		power = 3.0;
> 	}
> 	if ((jets==2) && (which=="Ht")) {
> 		val0 = 0.14;
> 		val1 = 1.5;
> 		width = 900;
> 		power = 3.0;
> 	}
261,265c666,671
< 	new TCanvas();
< 	gPad->SetLogy();
< 	cphojet->Draw();
< 	chist->Draw("same");
< }
---
> 	if ((jets==1 || jets==2) && (which=="LeadJetEt")) {
> 		val0 = 0.15;
> 		val1 = 1.5;
> 		width = 1000;
> 		power = 3.0;
> 	}
268,269c674,679
< void DebugJES(const TH1* hist_err, const TH1* jesup, const TH1* jesdown)
< {
---
> 	if ((jets==1) && (which=="Met")) {
> 		val0 = 0.14;
> 		val1 = 1.5;
> 		width = 900;
> 		power = 3.0;
> 	}
271,273c681,692
< 	assert(hist_err != NULL && "hist_err null!.");
< 	assert(jesup != NULL && "jesup null!.");
< 	assert(jesdown != NULL && "jesdown null!.");
---
> 	if (width > 0)
> 	{
> 		std::ostringstream myname, func;
> 		myname << "eq_" << jets << which;
> 		//func << val0 << " + " << (val1 - val0) / pow (width, power) << " *pow(x," << power << ")";
> 		func << sign << val0 << sign << (val1 - val0) / pow (width, power) << " *pow(x," << power << ")";
> 		return (new TF1 (myname.str().c_str(), func.str().c_str(), 0, width));
> 	};
> 	std::cout << "couldn't find errors for " << which << " " << jets << " jets" << std::endl;
> 	assert (false);
> 	return NULL;
> };
275,277d693
< 	TH1* chist = (TH1*) hist_err->Clone("hist_err_copy");
< 	TH1* uhist = (TH1*) jesup->Clone("jesup_copy");
< 	TH1* dhist = (TH1*) jesdown->Clone("jesdown_copy");
279,294d694
< 	new TCanvas();
< 	gPad->SetTickx();
< 	gPad->SetTicky();
< 	gPad->SetGridx();
< 	gPad->SetGridy();
< 	chist->SetLineColor(kBlue);
< 	chist->SetMarkerColor(kBlue);
< 	chist->SetMarkerStyle (kPlus);
< 	uhist->SetLineColor(kRed);
< 	uhist->SetMarkerColor(kRed);
< 	uhist->SetMarkerStyle (kDot);
< 	dhist->SetMarkerStyle (kMultiply);
< 	chist->Draw("P");	
< 	uhist->Draw("sameP");	
< 	dhist->Draw("sameP");	
< }
296,299c696,699
< void RatioPlot(const TH1* halojet, const TH1* zeejet,const TH1* zmmjet,
< 					const TH1* zttjet,const TH1* wenjet, const TH1* wmnjet,
< 					const TH1* wtnjet, const TH1* cosmicjet, const TH1* qcdjet, 
< 					const TH1* mcphojet, const TH1* qcdjet_100, const TH1* phojet)
---
> //-----------------------------------------------------------------------------
> //this seems to obsolete. being replaced by get_error_function? - 8-28-2009
> TF1* get_fit_function(const std::string which, const TH1* hist,int jets,
> 							std::string func, float min, float max, int pm=1)
301,302c701
< 	TH1* chist = (TH1*) halojet->Clone("halojet_copy");
< 	TH1* cphojet = (TH1*) phojet->Clone("phojet_copy");
---
> 	assert (hist != NULL && "hist is a null pointer");
304,312c703,708
< 	chist->Add(zeejet,1);
< 	chist->Add(zmmjet,1);
< 	chist->Add(zttjet,1);
< 	chist->Add(wenjet,1);
< 	chist->Add(wmnjet,1);
< 	chist->Add(wtnjet,1);
< 	chist->Add(cosmicjet,1);
< 	chist->Add(qcdjet,1);
< 	chist->Add(mcphojet,1);
---
> 	TH1* test_hist = dynamic_cast<TH1*>(hist->Clone ("fit"));
> 	for (unsigned bin = 1; bin <= (unsigned) hist->GetNbinsX(); ++ bin)
> 	{
> 		test_hist->SetBinContent(bin, pm * hist->GetBinError(bin));
> 		test_hist->SetBinError(bin, hist->GetBinError(bin)* 0.1);
> 	}
314c710
< 	cphojet->SetLineColor(kBlue);
---
> 	test_hist->SetDirectory(0);
316,327c712,722
< 	TH1 *hist_err_copy = NULL;
< 	{
< 		std::string myname = chist->GetName() + std::string ("_copy");
< 		hist_err_copy = dynamic_cast<TH1*>(chist->Clone (myname.c_str()));
< 		for (unsigned bin = 0; bin <= (unsigned) hist_err_copy->GetNbinsX() + 1; ++ bin)
< 		{
< 			float value = hist_err_copy->GetBinContent (bin);
< 			float error = hist_err_copy->GetBinError (bin);
< 			hist_err_copy->SetBinError (bin, value ? error / value : 0);
< 			hist_err_copy->SetBinContent (bin, 0);
< 		};
< 	};
---
> 	std::cout << " function fit range=" << min << "," << max << std::endl;
> 	test_hist->Fit(func.c_str(),"","", min, max);
> 	
> 	TList *list = test_hist->GetListOfFunctions();
> 	TIterator *it = list->MakeIterator();
> 	
> 	float x_min = test_hist->GetBinLowEdge(1);
> 	float x_max = test_hist->GetXaxis()->GetXmax();
> 	
> 
> 	TF1* tf = new TF1("fit_func",x_min,x_max, 100);
329c724
< 	for (unsigned bin = 0; bin <= (unsigned) chist->GetNbinsX() + 1; ++ bin)
---
> 	while (tf = (TF1*) it->Next() )
331,335c726,733
< 		const float val = chist->GetBinContent (bin);  // shouldn't this be the content of the error histo????? 1-23-2009
< 		const float scale = val ? 1. / val : 0;
< 		cphojet->SetBinContent (bin, (cphojet->GetBinContent (bin) - val) * scale);
< 		cphojet->SetBinError (bin, cphojet->GetBinError (bin) * scale);
< 	};
---
> 		Double_t p1[5];
> 		tf->GetParameters(p1);
> 		if (tf) break;
> 	}
> 	
> 	assert(tf!=NULL && "fit function not found!");
> 	if (tf) return tf;
> }
338,350c736,765
< 	assert(hist_err_copy!=NULL && "hist_err_copy is null");
< 	new TCanvas();
< 	gPad->SetTickx();
< 	gPad->SetTicky();
< 	gPad->SetGridx();
< 	gPad->SetGridy();
< 	cphojet->SetLineColor(kBlue);
< 	cphojet->SetMarkerColor(kBlue);
< 	cphojet->SetMarkerStyle (8);
< 	hist_err_copy->SetFillColor(kRed);
< 	hist_err_copy->SetFillStyle(3002);
< 	cphojet->Draw("P");	
< 	hist_err_copy->Draw("same E2");	
---
> 
> //-----------------------------------------------------------------------------
> void GetCosmicErr(std::vector<float>& ErrVec, const TH1 *hist , bool debug)
> {
> 	if (debug) std::cout << "IN COSMIC ERROR"<< std::endl;
> 	assert (hist!=NULL && "hist is null");
> 	for (int i=1; i <= hist->GetNbinsX(); i++) {
> 		float bin = hist->GetBinContent(i);
> 		float err = 0;
> 		if (bin) err = 1 / sqrt(bin);		//take stat error as the syst
> 		ErrVec.push_back(err);
> 		if (debug) std::cout << "halo bin[" <<i << "]=" << bin << std::endl;
> 	}
> }
> 
> //-----------------------------------------------------------------------------
> void GetHaloErr(std::vector<float>& ErrVec, const TH1 *hist, bool debug=false)
> {
> 	assert(hist!=NULL && "hist is null!");
> 	for (int i=1; i <= hist->GetNbinsX(); i++) {
> 		float bin = hist->GetBinContent(i);
> 		float err = bin * 0.5;		//take 50% to be the syst
> 		ErrVec.push_back(err);
> 		if (debug) std::cout << "halo err [" << i << "]="<< err <<std::endl;
> 	}
> 	if (debug)
> 	{
> 		std::cout << "halo err arr size = " << ErrVec.size() << std::endl;
> 		std::cout << "\n\n\n i am out" << std::endl;
> 	}
354a770,771
> 
> //-----------------------------------------------------------------------------
359a777
> //-----------------------------------------------------------------------------
364d781
< /*{{{*/
385d801
< /*}}}*/
387c803
< /*{{{*/
---
> //-----------------------------------------------------------------------------
397c813
< /*}}}*/
---
> //-----------------------------------------------------------------------------
448a865
> //-----------------------------------------------------------------------------
453a871
> //-----------------------------------------------------------------------------
466a885
> //-----------------------------------------------------------------------------
467a887,888
> // TESTED THIS METHOD AND ITS SUB-METHODS - sam
> //-----------------------------------------------------------------------------
475c896,897
< 		std::cout << hist->GetName() << " hist bin size=" << hist->GetBinWidth(1) << std::endl;
---
> 		std::cout << hist->GetName() << " hist bin size=" << hist->GetBinWidth(1) 
> 					<< std::endl;
478,480c900,904
<   	std::auto_ptr<TH1> result = 
< 		make_var_bin ( GetVarBinVector(xmin, xpoint1, xpoint2, xpoint3, xpoint4, width1, width2, width3, width4, debug) , hist, debug);
< 	
---
>   	std::auto_ptr<TH1> result = make_var_bin ( 
> 											GetVarBinVector(xmin, xpoint1, xpoint2, 
> 															xpoint3, xpoint4, width1, 
> 															width2, width3, width4, debug) , 
> 											hist, debug);
485a910,914
> //-----------------------------------------------------------------------------
> //this make the ratio plot and returns the error function (TF1) used for the
> //systematics band to the log plot. so the log plot errors will be based
> //on this same error function.
> //-----------------------------------------------------------------------------
496,497c925,929
< 	if (debug) std::cout << "going to loop1" <<std::endl; 
< 
---
> 	std::cout << "\n ======= "<< __FUNCTION__ << ":" << __LINE__ << ":" << std::endl;
> 	std::cout << " ======= Hists given to MakeRatioHist first 4 bins" << std::endl;
> 	Debug_DumpHist(pho, __LINE__,4);
> 	Debug_DumpHist(err, __LINE__,4);
> 	
507c939,942
< 	if (debug) std::cout << "going to loop2" << std::endl; 
---
> 	std::cout << "\n ======= "<< __FUNCTION__ << ":" << __LINE__ << ":" << std::endl;
> 	std::cout << " ======= Err hist val and ERROR vector values" << std::endl;
> 	std::cout << setw(8) << "bin" << setw(10) << "value" << setw(8) << "Error"
> 			 	<< std::endl; 
515c950
< 			float error = hist_err_copy->GetBinError (bin);
---
> 			//float error = hist_err_copy->GetBinError (bin);
518a954,957
> 
> 			std::cout << setiosflags(ios::fixed) << setprecision(1) 
> 				<< setw(8) << bin << setw(10) << value << setw(8) << Errors.at(bin-1)
> 			 	<< std::endl; 
524,525c963
< 	if (debug) std::cout << "out of loop2" <<std::endl; 
< 	for (unsigned bin = 1; bin <= (unsigned)err->GetNbinsX(); ++ bin)
---
> 	//for (unsigned bin = 1; bin <= (unsigned)err->GetNbinsX(); ++ bin)
628,629c1066,1067
< 	TH1* tt = dynamic_cast<TH1*>(hist_err_copy->Clone("temp"));
< 		tt->SetDirectory(0);
---
> 	//TH1* tt = dynamic_cast<TH1*>(hist_err_copy->Clone("temp"));
> 	//	tt->SetDirectory(0);
679,680c1117,1121
< 	//hist_err_copy->Draw ("SAME E2");
< 	tf->SetFillColor(kRed);
---
> 	//below is the hist that draws the envelop using the ploynomial
> 	hist_err_copy->Draw ("SAME E2");
> 	//std::cout << __FUNCTION__ << ":" << __LINE__ << ":: hist_err_copy dump" << std::endl;
> 	
> 	/*tf->SetFillColor(kRed);
687a1129
> 	*/
690c1132
< 	temp->Draw("same E2");
---
> 	//temp->Draw("same E2");
695c1137,1138
< 		std::ostringstream str,str1;
---
> 		//c->SetFillColor(kRed);
> 		std::ostringstream str,str1,str2;
697c1140
< 		c->Print (str.str().c_str());
---
> 		//c->Print (str.str().c_str());
699c1142,1144
< 		c->Print (str1.str().c_str(),"pdf");
---
> 		//c->Print (str1.str().c_str(),"pdf");
> 		str2 << "ratioplot" << jets << "_" << which << ".eps";
> 		//c->Print (str2.str().c_str(),"eps");
710a1156,1157
> //-----------------------------------------------------------------------------
> //-----------------------------------------------------------------------------
720a1168,1169
> //-----------------------------------------------------------------------------
> //-----------------------------------------------------------------------------
736a1186,1187
> //-----------------------------------------------------------------------------
> //-----------------------------------------------------------------------------
743c1194,1199
< 	std::cout << "NOT TESTES COMPLETELY !!!!!!!!!!!!!!!" << std::endl;
---
> 
> 
> 	assert (qcdhist != NULL && "GetQCD100Err:: qcdhist is NULL!");
> 	ErrVec.clear();
> 	
> 	std::cout << "NOT TESTED COMPLETELY !!!!!!!!!!!!!!!" << std::endl;
764c1220,1221
< 		std::cout << "path not found :" << abspath <<std::endl;
---
> 		fhadem->ls();
> 		std::cout << __FUNCTION__<< ":" << __LINE__ << ": path '" << abspath <<"' not found?:" << abspath <<std::endl;
770c1227
< 		std::cout << __LINE__ << " ::hist not found in the dir" <<std::endl;
---
> 		std::cout << __FUNCTION__ << ":" << __LINE__ << ": hist not found in the dir" <<std::endl;
785c1242
<    isohist  = (TH1F*) MakeVariableBins (isohist, xmin, xpoint1, xpoint2, xpoint3, xpoint4, width1, width2, width3, width4, true, false);  
---
>    isohist    = (TH1F*) MakeVariableBins (isohist, xmin, xpoint1, xpoint2, xpoint3, xpoint4, width1, width2, width3, width4, true, false);  
787c1244
<    trkisohist  = (TH1F*) MakeVariableBins (trkisohist, xmin, xpoint1, xpoint2, xpoint3, xpoint4, width1, width2, width3, width4, true, false);  
---
>    trkisohist = (TH1F*) MakeVariableBins (trkisohist, xmin, xpoint1, xpoint2, xpoint3, xpoint4, width1, width2, width3, width4, true, false);  
798a1256
> 	
802a1261
> 		isohist->SetMarkerColor(kRed);
803a1263
> 		trkpthist->SetMarkerColor(kBlue);
805,809c1265,1274
< 		hademhist->SetMarkerStyle(1);
< 		isohist->SetMarkerStyle(2);
< 		trkpthist->SetMarkerStyle(3);
< 		trkisohist->SetMarkerStyle(4);
< 
---
> 		trkisohist->SetMarkerColor(kGreen);
> 		hademhist->SetMarkerStyle(20);
> 		isohist->SetMarkerStyle(21);
> 		trkpthist->SetMarkerStyle(22);
> 		trkisohist->SetMarkerStyle(23);
> 		
> 		std::stringstream title;
> 		title << qcdhist->GetTitle() << " : QCD Shape Sytematic by varying #gamma ID cuts;;Scale(QCD/Varied) / QCD" << std::endl;
> 		hademhist->SetTitle(title.str().c_str());
> 		
816a1282,1292
> 
> 		TLegend *leg = new TLegend (0.7,0.6,0.9,0.9);
> 		leg->SetTextFont(42);
> 		leg->SetTextSize(0.03);
> 
> 		leg->AddEntry(isohist,"Iso cut varied");
> 		leg->AddEntry(hademhist,"HadEm cut varied");
> 		leg->AddEntry(trkpthist,"TrkPt cut varied");
> 		leg->AddEntry(trkisohist,"TrkIso cut varied");
> 		leg->Draw();
> 
819a1296,1298
> 	std::cout << __FUNCTION__ << ":" << __LINE__ << std::endl;
> 	std::cout << setw(5) << "bin" << setw(10) << "val" 
> 				<< setw(10) << "FracErr" << setw(8) << "Err" << std::endl;
823a1303,1305
> 		
> 		// well above statement is not true. this depends on the shape.
> 		// is it? 9-11-2009
827a1310
> 		
828a1312,1313
> 		std::cout << setw(5) << i << setw(10) << qcdhist->GetBinContent(i) 
> 					<< setw(10) << fabs(max-1) << setw(8) << err << std::endl;
837,840c1322,1329
< void MakeHistLogAndRatio (std::string which, const int jets, const std::string name, const std::string title,
< 				 const std::string path, const int QCDerrMtd,
< 				 const float xmin, const float xpoint1, const float xpoint2, const float xpoint3, const float xpoint4,
< 				 const float width1, const float width2, const float width3, const float width4)
---
> void MakeHistLogAndRatio (std::string which, const int jets, 
> 					const std::string name,const std::string title,
> 				 	const std::string path, const int QCDerrMtd,
> 				 	const float xmin, const float xpoint1, 
> 					const float xpoint2, const float xpoint3, 
> 					const float xpoint4, const float width1, 
> 					const float width2, const float width3, 
> 					const float width4)
842c1331
< /*{{{*/
---
> 
852a1342
> 	
881,883c1371,1378
< 	// ok path :1Jet/Photon/
< 	std::string sHaloDir("Hist/HALO/"+path), sCosmicDir("Hist/COSMIC/"+path), sQcdDir("Hist/SIDEBAND/"+path), sSigDir("Hist/SIGNAL/"+path);
< 	std::string sMcCentralDir("Hist/CENTRAL/"+path), sMcUpDir("Hist/EMJESUP/"+path), sMcDownDir("Hist/EMJESDOWN/"+path);
---
>   // ok path :1Jet/Photon/
>   std::string sHaloDir     ("Hist/HALO/"     + path);
>   std::string sCosmicDir   ("Hist/COSMIC/"   + path);
>   std::string sQcdDir      ("Hist/SIDEBAND/" + path);
>   std::string sSigDir      ("Hist/SIGNAL/"   + path);
>   std::string sMcCentralDir("Hist/CENTRAL/"  + path);
>   std::string sMcUpDir     ("Hist/EMJESUP/"  + path);
>   std::string sMcDownDir   ("Hist/EMJESDOWN/"+ path);
993a1489,1494
> 
> 	std::cout << "\n -------------- " << __FUNCTION__ << ":" << __LINE__ << " : hists before rebinning only" << std::endl;
> 	//QuickDebug( halojet,  zeejet, zmmjet, zttjet, wenjet, wmnjet,
> 	//				wtnjet,  cosmicjet,  qcdjet,  mcphojet,  qcdjet_100,  phojet);
> 
> 	
996c1497,1527
< /*}}}*/
---
> 	//Debug_DumpHist(phojet);
> /*
> 	phojet->Sumw2();
> 	halojet->Sumw2();
> 	zeejet->Sumw2();
> 	zmmjet->Sumw2();
> 	zttjet->Sumw2();
> 	wenjet->Sumw2();
> 	wmnjet->Sumw2();
> 	wtnjet->Sumw2();
> 	cosmicjet->Sumw2();
> 	qcdjet->Sumw2();
> 	mcphojet->Sumw2();
> 	qcdjet_100->Sumw2();
> 
>   	zeejetJESUP->Sumw2();
>   	zmmjetJESUP->Sumw2();
>   	zttjetJESUP->Sumw2();
>   	wenjetJESUP->Sumw2();
>   	wmnjetJESUP->Sumw2();
>   	wtnjetJESUP->Sumw2();
>   	mcphojetJESUP->Sumw2();
> 
>   	zeejetJESDOWN->Sumw2();
>   	zmmjetJESDOWN->Sumw2();
>   	zttjetJESDOWN->Sumw2();
>   	wenjetJESDOWN->Sumw2();
>   	wmnjetJESDOWN->Sumw2();
>   	wtnjetJESDOWN->Sumw2();
>   	mcphojetJESDOWN->Sumw2();
> */
997a1529,1530
> 
> 	
1026a1560,1600
> 	//for debug only
> 	
> 	//DebugStatErr(zeejet, zmmjet, zttjet, wenjet, wmnjet, wtnjet,qcdjet,  mcphojet);
> 	DebugTwoHistRatio(qcdjet,mcphojet);
> 	
> 	/*
> 	mcphojet->Scale(1.0/(1.0* mcphojet->Integral()));
> 	qcdjet->Scale(1.0/(1.0* qcdjet->Integral()));
> 	phojet->Scale(1.0/(1.0* phojet->Integral()));
> 	DebugJES(phojet,mcphojet,qcdjet,__LINE__,"E_{T}^{Lead jet} : DATA/SIDEBAND/PHO MC each normalized to unity after rebining");
> 	return;
> 	*/
> 	//end debug stuff
> 
> 	std::cout << __LINE__ << " : " << __FUNCTION__ << " ==================== AFTER REBIN ===  "<< std::endl;
> 
> /*	std::cout << __LINE__ << ":: DATA HISTS after rebinning " << std::endl;
> 	Debug_DumpHist(phojet,__LINE__,5);
> 	std::cout << __LINE__ << ":: QCD HISTS after rebinning " << std::endl;
> 	Debug_DumpHist(qcdjet,__LINE__,5);
> 	std::cout << __LINE__ << ":: QCD 100% HISTS after rebinning " << std::endl;
> 	Debug_DumpHist(qcdjet_100,__LINE__,5);
> 	std::cout << __LINE__ << ":: MC PHO HISTS after rebinning " << std::endl;
> 	DebugJES(mcphojet,mcphojetJESUP, mcphojetJESDOWN,__LINE__, "#gamma MC - after rebining", "PhoMC_afterRebining.gif");
> 	std::cout << __LINE__ << ":: Zee HISTS after rebinning " << std::endl;
> 	DebugJES(zeejet, zeejetJESUP, zeejetJESDOWN, __LINE__, "Zee MC - after rebining", "ZeeMC_afterRebining.gif");
> 	std::cout << __LINE__ << ":: Zmm HISTS after rebinning " << std::endl;
> 	DebugJES(zmmjet, zmmjetJESUP, zmmjetJESDOWN, __LINE__, "Zmm MC - after rebining", "ZmmMC_afterRebining.gif");
> 	std::cout << __LINE__ << ":: Ztt HISTS after rebinning " << std::endl;
> 	DebugJES(zttjet, zttjetJESUP, zttjetJESDOWN, __LINE__, "Ztt MC - after rebining", "ZttMC_afterRebining.gif");
> 	std::cout << __LINE__ << ":: Wen HISTS after rebinning " << std::endl;
> 	DebugJES(wenjet, wenjetJESUP, wenjetJESDOWN, __LINE__, "Wen MC - after rebining", "WenMC_afterRebining.gif");
> 	std::cout << __LINE__ << ":: Wmn HISTS after rebinning " << std::endl;
> 	DebugJES(wmnjet, wmnjetJESUP, wmnjetJESDOWN, __LINE__, "Wmn MC - after rebining", "WmnMC_afterRebining.gif");
> 	std::cout << __LINE__ << ":: Wtn HISTS after rebinning " << std::endl;
> 	DebugJES(wtnjet, wtnjetJESUP, wtnjetJESDOWN, __LINE__, "Wtn MC - after rebining", "WtnMC_afterRebining.gif");
> */
> 	
> 	//TESTED UP TO THIS POINT - SAM
> 	//std::cout << "\n -------------- " << __FUNCTION__ << ":" << __LINE__ << " : hists after rebinning only" << std::endl;
> 	//Debug_DumpHist(phojet);
1029a1604,1605
> 	//
> 
1037c1613
<   float fake_pho_frac_m = fake_pho_frac_d - fake_pho_frac_sigma;
---
>   //float fake_pho_frac_m = fake_pho_frac_d - fake_pho_frac_sigma;
1040,1041c1616,1617
<   float qcd_m = 0.251;			//mean+sigma
<   float qcd_p = 0.387;			//mean-sigma
---
>   //float qcd_m = 0.251;			//mean+sigma
>   //float qcd_p = 0.387;			//mean-sigma
1071c1647
< 	float mcphoNorm	 = 0;
---
> 	float mcphoNorm  = 0;
1076,1078c1652,1654
< 	qcdNorm     = ((phojet->Integral()) * qcd_scale)/qcdjet->Integral();
< 	qcd100Norm  = ((phojet->Integral()))/qcdjet_100->Integral(); 
< 	mcphoNorm   = ((phojet->Integral()) * phomc_scale)/mcphojet->Integral();
---
> 	qcdNorm     = (phojet->Integral() * qcd_scale) / qcdjet->Integral();
> 	qcd100Norm  = phojet->Integral() / qcdjet_100->Integral(); 
> 	mcphoNorm   = (phojet->Integral() * phomc_scale) / mcphojet->Integral();
1085,1088c1661
< 	float dataLum=2043.0;	//nb-1
< /////////////
< //##### HERE IS THE ERROR!
< 	//ok here is the bug!!! data lum is in nb and EWK lun is in pb
---
> 	float dataLum=2043.0;	//pb-1
1091,1096c1664,1677
< 	float zeenorm = (dataLum/34056)*kFac;                   // for EWK mc see. log book#2 pp.72
< 	float zmmnorm = (dataLum/38732)*kFac;                   // for EWK mc see. log book#2 pp.72
< 	float zttnorm = (dataLum/27755)*kFac;                   // for EWK mc see. log book#2 pp.72
< 	float wennorm = (dataLum/9438)*kFac;                   // for EWK mc see. log book#2 pp.72
< 	float wmnnorm = (dataLum/5183)*kFac;                   // for EWK mc see. log book#2 pp.72
< 	float wtnnorm = (dataLum/3520)*kFac;                   // for EWK mc see. log book#2 pp.72
---
> 	// SF = DATA_LUM * ( 1 / EWK_LUM ) * KFAC
> 	//    = DATA_LUM * ( 1 / (TOT EVTS PROCESSED/CROSS SECTION) ) * KFAC
> 	//    here are the values picked up from pp.102
> 	//    DATASET   TOTAL EVTS   CROSSSECTION   LUM == TOTAL EVTS/CROSSSECTION
> 	//    Zee       12,092,155    355pb          34062 pb-1
> 	//    Zmm       13,755,133    355pb          38746 pb-1
> 	//    Ztt       
> 
> 	float zeenorm = (dataLum/34056)*kFac;    // for EWK mc see. log book#2 pp.72 (old) pp.102 (new)
> 	float zmmnorm = (dataLum/38732)*kFac;    // for EWK mc see. log book#2 pp.72 (old) pp.102 (new)
> 	float zttnorm = (dataLum/27755)*kFac;    // for EWK mc see. log book#2 pp.72 (old) pp.102 (new)
> 	float wennorm = (dataLum/9438)*kFac;     // for EWK mc see. log book#2 pp.72 (old) pp.102 (new)
> 	float wmnnorm = (dataLum/5183)*kFac;     // for EWK mc see. log book#2 pp.72 (old) pp.102 (new)
> 	float wtnnorm = (dataLum/3520)*kFac;     // for EWK mc see. log book#2 pp.72 (old) pp.102 (new)
1097a1679
> 	
1109a1692
> 	
1126a1710,1754
> 
> 	//for debugging
> 	/// stopped here
> 	
> 	
> 	std::cout << __LINE__ << " : " << __FUNCTION__ <<  "======== AFTER SCALING " << std::endl;
> 	/*Debug_DumpHist(phojet,__LINE__,5);
> 	std::cout << __LINE__ << ":: QCD HISTS after rebinning " << std::endl;
> 	Debug_DumpHist(qcdjet,__LINE__,5);
> 	std::cout << __LINE__ << ":: QCD 100% HISTS after rebinning " << std::endl;
> 	Debug_DumpHist(qcdjet_100,__LINE__,5);
> 	std::cout << __LINE__ << ":: MC PHO HISTS after scaling " << std::endl;
> 	DebugJES(mcphojet,mcphojetJESUP, mcphojetJESDOWN,__LINE__, "#gamma MC - after scaling", "PhoMC_afterScaling.gif");
> 	std::cout << __LINE__ << ":: Zee HISTS after scaling " << std::endl;
> 	DebugJES(zeejet, zeejetJESUP, zeejetJESDOWN, __LINE__, "Zee MC - after scaling", "ZeeMC_afterScaling.gif");
> 	std::cout << __LINE__ << ":: Zmm HISTS after scaling " << std::endl;
> 	DebugJES(zmmjet, zmmjetJESUP, zmmjetJESDOWN, __LINE__, "Zmm MC - after scaling", "ZmmMC_afterScaling.gif");
> 	std::cout << __LINE__ << ":: Ztt HISTS after scaling " << std::endl;
> 	DebugJES(zttjet, zttjetJESUP, zttjetJESDOWN, __LINE__, "Ztt MC - after scaling", "ZttMC_afterScaling.gif");
> 	std::cout << __LINE__ << ":: Wen HISTS after scaling " << std::endl;
> 	DebugJES(wenjet, wenjetJESUP, wenjetJESDOWN, __LINE__, "Wen MC - after scaling", "WenMC_afterScaling.gif");
> 	std::cout << __LINE__ << ":: Wmn HISTS after scaling " << std::endl;
> 	DebugJES(wmnjet, wmnjetJESUP, wmnjetJESDOWN, __LINE__, "Wmn MC - after scaling", "WmnMC_afterScaling.gif");
> 	std::cout << __LINE__ << ":: Wtn HISTS after scaling " << std::endl;
> 	DebugJES(wtnjet, wtnjetJESUP, wtnjetJESDOWN, __LINE__, "Wtn MC - after scaling", "WtnMC_afterScaling.gif");
> */
> 	
> 	std::cout << "\n" << std::endl; 
> 	std::cout << __LINE__ << ":: ALL  HISTS after scaling " << std::endl;
> 	std::cout << __LINE__ << ":: halojet Integral    =  " << halojet->Integral() << std::endl;
> 	std::cout << __LINE__ << ":: cosmicjet Integral  =  " << cosmicjet->Integral() << std::endl;
> 	std::cout << __LINE__ << ":: qcdjet Integral     =  " << qcdjet->Integral() << std::endl;
> 	std::cout << __LINE__ << ":: qcdjet_100 Integral =  " << qcdjet_100->Integral() << std::endl;
> 	std::cout << __LINE__ << ":: mcphojet Integral   =  " << mcphojet->Integral() << std::endl;
> 	std::cout << __LINE__ << ":: zeejet Integral     =  " << zeejet->Integral() << std::endl;
> 	std::cout << __LINE__ << ":: zmmjet Integral     =  " << zmmjet->Integral() << std::endl;
> 	std::cout << __LINE__ << ":: zttjet Integral     =  " << zttjet->Integral() << std::endl;
> 	std::cout << __LINE__ << ":: wenjet Integral     =  " << wenjet->Integral() << std::endl;
> 	std::cout << __LINE__ << ":: wmnjet Integral     =  " << wmnjet->Integral() << std::endl;
> 	std::cout << __LINE__ << ":: wtnjet Integral     =  " << wtnjet->Integral() << std::endl;
> 
> 	//return;
> 
> 	// end debug stuff
> 	
1212a1841
> 	std::vector<float> IdErr;
1246a1876,1877
> 		//don't  i NEED TO subtract off the other backgrounds from data before
> 		//normalizing QCD/MC pho samples????
1255a1887,1891
> 
> 	//	DebugJES(hist_err, hist_varyMcQcdMixSyst, hist_varyMcQcdMixSyst, __LINE__, 
> 	//			"E_{T}^{Lead jet} : What I see for FakePhoFrac+#sigma: compared to total background");
> 	//	DebugJES(hist_err, hist_mcphoVaried, hist_qcdVaried, __LINE__ ,"E_{T}^{Lead jet} : Scaled (to Data) #gamma MC and Sideband by Fake #gamma fraction compared to total background");
> 		
1262c1898
< 		//MakeHist(qcdmcMixErr, hist_err);
---
> 		//DebugMakeHist(qcdmcMixErr, hist_err);
1264c1900,1910
< 	 
---
> 		//this is new systamatic for the 
>     	std::string abspath("Hist/"+path);
> 	   GetQCD100Err(IdErr, qcdjet, name, abspath, xmin, xpoint1, xpoint2, xpoint3, xpoint4, width1, width2, width3, width4, true);
> 		// I am temporaly doing this till I rewrite my code.
> 		// I'll add the fake fraction and the ID error into one vector
> 	 	assert(qcdmcMixErr.size() == IdErr.size() && "MakeHistLogAndRatio::IdErr and qcdmcMixErr vector are not the same size!");
> 		for (int i=0;i<qcdmcMixErr.size();++i)
> 		{
> 			qcdmcMixErr.at(i) = sqrt(pow(qcdmcMixErr.at(i),2) + pow(IdErr.at(i),2));
> 		}
> 		
1275a1922
> 	
1290a1938
> 	//DebugStatErr(zeejet, zmmjet, zttjet, wenjet, wmnjet, wtnjet,  mcphojet, qcdjet, hist_err);
1291a1940
> /*
1310c1959
< 
---
> */
1313a1963,1975
> 
> 	std::cout << __FUNCTION__ << ":" << __LINE__ << "::All Errors" << std::endl;
> 	std::cout << setw(4) << "bin"<< setw(8) << "JES"
> 				 << setw(8) << "PhoFrac" << setw(8) << "EWK Lum" 
> 				 << setw(8) << "Cosmic" << setw(8) << "Halo"
> 				 << setw(8) << "StatErr" << setw(10) << "QCD IdErr" << setw(10) << "Total" << std::endl; 
> 	assert ( (cosmicErr.size() == haloErr.size() 
> 				&& haloErr.size()==qcdmcMixErr.size() 
> 				&& qcdmcMixErr.size()==JESerr.size()
> 				&& JESerr.size() == statErr.size() 
> 				&& statErr.size() == cosmicErr.size() 
> 				) 
> 			&& "MakeHistLogAndRatio::Error vectors are not same in size!");
1325a1988,2000
> 		// now set the sum of background hists error to this total
> 		if (hist_err->GetBinContent(i+1))
> 		{
> 			hist_err->SetBinError(i+1, ERRORS.at(i));
> 		}
> 		
> 		std::cout << setiosflags(ios::fixed) << setprecision(1) 
> 			<< setw(4) << i+1 << setw(8) << JESerr[i]
> 			<< setw(8) << qcdmcMixErr[i] << setw(8) << ewksum 
> 			<< setw(8) << cosmicErr[i] << setw(8) << haloErr[i]
> 			<< setw(8) << statErr[i] << setw(10) << IdErr[i] 
> 			<< setw(10) << ERRORS.at(i) << std::endl; 
> /*
1339c2014
< 
---
> */
1342,1374c2017
< /*
< 	hist_halo->Divide(hist_err);
< 	hist_cosmic->Divide(hist_err);
< 	hist_zee->Divide(hist_err);
< 	hist_jes->Divide(hist_err);
< 	hist_stat->Divide(hist_err);
< 	hist_qcdmcmix->Divide(hist_err);
< 	
< 	
< 	new TCanvas();
< 	hist_halo->SetTitle("DEBUG :: All errors");
< 	hist_halo->SetMaximum(0.5e6);
< 	gPad->SetLogy();
< 	gPad->SetGridx();
< 	gPad->SetGridy();
< 	gPad->SetEditable(0);
< 	TLegend *leg_err = new TLegend (0.5,0.6,0.9,0.9);
< 	leg_err->SetTextFont(42);
< 	leg_err->SetTextSize(0.03);
<  	leg_err->AddEntry(hist_halo,"halo");
<  	leg_err->AddEntry(hist_cosmic,"cosmic");
<  	leg_err->AddEntry(hist_zee,"ewk");
<  	leg_err->AddEntry(hist_stat,"stat");
<  	leg_err->AddEntry(hist_jes,"jes");
<  
< 	hist_halo->Draw("P");
< 	hist_cosmic->Draw("sameP");
< 	hist_zee->Draw("sameP");
< 	hist_stat->Draw("sameP");
< 	hist_jes->Draw("sameP");
< 	leg_err->Draw();
< */
< 	
---
> /*	
1383,1398d2025
< /*
< 	new TCanvas();
< 	myhist->SetTitle("DEBUG :: ERRORS vector contents");
< 	gPad->SetLogy();
< 	gPad->SetGridx();
< 	gPad->SetGridy();
< 	myhist->Draw();
< 	gPad->SetEditable(0);
< 
< 	new TCanvas();
< 	myhist->SetTitle("DEBUG :: Relative Error: (sum of ERRORS/err_hist");
< 	//gPad->SetLogy();
< 	gPad->SetGridx();
< 	gPad->SetGridy();
< 	myhist->Divide(hist_err);
< 	myhist->Draw();
1401c2028
< 
---
> 	MakeRatioPlot(which, jets, phojet,hist_err, ERRORS,true);
1404c2031,2033
< 	//std::cout << "err size=" << ERRORS.size() << "\t" << hist_err->GetNbinsX() << std::endl;
---
> /*
>  	// I am commenting this part out temorily to see the real
> 	// values of systematics - 8-28-2009
1406d2034
< 	//std::cout << "made ratio plot"<< std::endl;
1414c2042,2044
<   }
---
> 		float err = func->Eval (hist_err->GetXaxis()->GetBinCenter (bin)) * hist_err->GetBinContent (bin);
> 		float cont = hist_err->GetBinContent(bin);
> 		float loed = hist_err->GetXaxis()->GetBinLowEdge(bin);
1416,1421c2046,2048
< 	std::cout << "done set error"<< std::endl;
< 
< //QuickDebug( halojet,  zeejet, zmmjet, zttjet, wenjet, wmnjet,
< //					wtnjet,  cosmicjet,  qcdjet,  mcphojet,  qcdjet_100,  phojet);
< 
< //RatioPlot(halojet,  zeejet, zmmjet, zttjet, wenjet, wmnjet,
---
>   }
> */
> 	//std::cout << "\n -------------- " << __FUNCTION__ << ":" << __LINE__ << " " << std::endl;
1423d2049
< 					//wtnjet,  cosmicjet,  qcdjet,  mcphojet,  qcdjet_100,  phojet);
1543,1544c2169,2170
<   leg->SetBorderSize (1);
<   leg->SetFillColor (10);
---
> 	leg->SetBorderSize (1);
> 	leg->SetFillColor (10);
1548c2174
< 				 
---
> 
1557,1564c2183,2189
<   new TCanvas();
<   gStyle->SetTextFont(132);
<   hs->SetMinimum(0.05);
<   if (jets == 1) hs->SetMaximum(0.5e6);
<   if (jets == 2) hs->SetMaximum(0.5e5);
<   if (jets == 2 && which == "LeadJetEt") hs->SetMaximum(0.5e6);
<   if (which == "NJet") hs->SetMaximum(0.5e7);
<   
---
> 	new TCanvas();
> 	gStyle->SetTextFont(132);
> 	hs->SetMinimum(0.05);
> 	if (jets == 1) hs->SetMaximum(0.5e6);
> 	if (jets == 2) hs->SetMaximum(0.5e5);
> 	if (jets == 2 && which == "LeadJetEt") hs->SetMaximum(0.5e6);
> 	if (which == "NJet") hs->SetMaximum(0.5e7);
1566,1574c2191,2200
<   gPad->SetLogy();
<   gPad->SetTickx();
<   gPad->SetTicky();
<   hs->Draw("HIST");		//need this as I am calling sumw2 for all hists. if not it will draw all hists with error bars
< 
<   hs->GetXaxis()->SetTitle (title.c_str());
<   std::ostringstream ytitle;
<   //if (which == "PhotonEt") ytitle << "#Delta N/ #Delta E_{T}";
<   //if (which == "InvMass") ytitle << "#Delta N/ #Delta M";
---
> 
> 	gPad->SetLogy();
> 	gPad->SetTickx();
> 	gPad->SetTicky();
> 	hs->Draw("HIST");		//need this as I am calling sumw2 for all hists. if not it will draw all hists with error bars
> 
> 	hs->GetXaxis()->SetTitle (title.c_str());
> 	std::ostringstream ytitle;
> 	//if (which == "PhotonEt") ytitle << "#Delta N/ #Delta E_{T}";
> 	//if (which == "InvMass") ytitle << "#Delta N/ #Delta M";
1583,1601d2208
<   
<   if (which == "NJet") ytitle << "Events";
<   else ytitle << "Events / " << phojet->GetBinWidth(1) << " " << yunits;
<   hs->GetYaxis()->SetTitle (ytitle.str().c_str());
< 
<  int labelfont = 10 * 4 + 2;		//10 * fond ID + precision (2 = scalable)
<  int titlefont = 10 * 4 + 2;		//10 * fond ID + precision (2 = scalable)
<  hs->GetXaxis()->SetLabelFont(labelfont);
<  hs->GetYaxis()->SetLabelFont(labelfont);
<  hs->GetYaxis()->SetLabelSize(0.05);
<  hs->GetXaxis()->SetLabelSize(0.05);
<  hs->GetXaxis()->SetTitleFont(titlefont);
<  hs->GetYaxis()->SetTitleFont(titlefont);
<  hs->GetYaxis()->SetTitleSize(0.05);
<  hs->GetXaxis()->SetTitleSize(0.05);
<  hs->GetXaxis()->SetTitleOffset(0.9);
<  hs->GetYaxis()->SetTitleOffset(0.9);
<  hs->GetXaxis()->CenterTitle(true);
<  hs->GetYaxis()->CenterTitle(true);
1602a2210,2248
> 	if (which == "NJet") ytitle << "Events";
> 	else ytitle << "Events / " << phojet->GetBinWidth(1) << " " << yunits;
> 	hs->GetYaxis()->SetTitle (ytitle.str().c_str());
> 
> 	int labelfont = 10 * 4 + 2;		//10 * fond ID + precision (2 = scalable)
> 	int titlefont = 10 * 4 + 2;		//10 * fond ID + precision (2 = scalable)
> 	hs->GetXaxis()->SetLabelFont(labelfont);
> 	hs->GetYaxis()->SetLabelFont(labelfont);
> 	hs->GetYaxis()->SetLabelSize(0.05);
> 	hs->GetXaxis()->SetLabelSize(0.05);
> 	hs->GetXaxis()->SetTitleFont(titlefont);
> 	hs->GetYaxis()->SetTitleFont(titlefont);
> 	hs->GetYaxis()->SetTitleSize(0.05);
> 	hs->GetXaxis()->SetTitleSize(0.05);
> 	hs->GetXaxis()->SetTitleOffset(0.9);
> 	hs->GetYaxis()->SetTitleOffset(0.9);
> 	hs->GetXaxis()->CenterTitle(true);
> 	hs->GetYaxis()->CenterTitle(true);
> 
> 
> 	hist_err->SetDrawOption("HIST");
> 	hist_err->Draw("sameE2");
> 	phojet->Draw("same");
> 	leg->Draw ();
> 
> 	// for debugging only
> 	new TCanvas();
> 
> 	TH1* sdHist = (TH1*) phojet->Clone("sam_datahist");
> 	TH1* sbHist = (TH1*) hist_err->Clone("sam_bckghist");
> 	sdHist->SetDirectory(0);
> 	sbHist->SetDirectory(0);
> 	//sdHist->Sumw2();
> 	//sbHist->Sumw2();
> 	sdHist->Divide(sbHist);
> 	sdHist->SetMarkerStyle(20);
> 	sdHist->SetMarkerSize(1.5);
> 	sbHist->Draw("PE2");
> 	
1604,1607c2250,2260
<   hist_err->SetDrawOption("HIST");
<   hist_err->Draw("sameE2");
<   phojet->Draw("same");
<   leg->Draw ();
---
> 	std::cout << __FUNCTION__ << ":" << __LINE__ << "::hist_DATA ========" << std::endl;
> 	Debug_DumpHist(phojet, __LINE__,4);
> 	std::cout << __FUNCTION__ << ":" << __LINE__ << "::hist_ERR =========" << std::endl;
> 	Debug_DumpHist(hist_err, __LINE__,4);
> 	std::cout << __FUNCTION__ << ":" << __LINE__ << "::hist_JESUP =======" << std::endl;
> 	Debug_DumpHist(hist_jesup, __LINE__,4);
> 	std::cout << __FUNCTION__ << ":" << __LINE__ << "::hist_JESDOWN =====" << std::endl;
> 	Debug_DumpHist(hist_jesdown, __LINE__,4);
> 
> 	// end debug stuff
> 
1608a2262
>   
1659a2314,2319
>   	//phojet->Print();
> 	//std::cout << "bin 1 = " <<  phojet->GetBinContent(1) << std::endl;
> 	//std::cout << "bin 2 = " <<  phojet->GetBinContent(2) << std::endl;
> 	//std::cout << "bin 3 = " <<  phojet->GetBinContent(3) << std::endl;
> 	//std::cout << "bin3/bin2 = " << (phojet->GetBinContent(3)/phojet->GetBinContent(2)) << std::endl;
> 
1676a2337,2338
> 		else if (which == "LeadJetEt") 	MakeHistLogAndRatio (which, jets, "EtCorr","E_{T}^{#gamma} (GeV)","1Jet/LeadJet", qcdMcMix,0,200,250,300,650, 10,10,50,250);
>     	else if (which == "Met") 	MakeHistLogAndRatio (which, jets, "Met","MEt", "1Jet/Event",qcdMcMix,0,300,600,800,1200, 20,50,100,300);
1692a2355
> 		//c->SetFillColor(kRed);
1695c2358
< 			std::ostringstream str,str1;
---
> 			std::ostringstream str,str1,str2;
1697c2360
< 			c->Print (str.str().c_str());
---
> 			//c->Print (str.str().c_str());
1699c2362,2364
< 			c->Print (str1.str().c_str(),"pdf");
---
> 			//c->Print (str1.str().c_str(),"pdf");
> 			str2 << "plot" << jets << "_" << which << ".eps";
> 			//c->Print (str2.str().c_str(),"eps");
1707,1711c2372,2382
< 	MakeHistLogAndRatio (1, "PhotonEt");
< 	MakeHistLogAndRatio (2, "PhotonEt");
< 	MakeHistLogAndRatio (1, "InvMass");
< 	MakeHistLogAndRatio (2, "InvMass");
< 	MakeHistLogAndRatio (2, "PhoJetsInvMass");
---
> 	//good plots that works
> 
> 	//MakeHistLogAndRatio (1, "PhotonEt");
> 	//MakeHistLogAndRatio (2, "PhotonEt");
> 	//MakeHistLogAndRatio (1, "InvMass");
> 	//MakeHistLogAndRatio (2, "InvMass");
> 	//MakeHistLogAndRatio (2, "PhoJetsInvMass");
> 	//MakeHistLogAndRatio (2, "JetsInvMass");
> 	//MakeHistLogAndRatio (1, "NJet");
> 
> 
1714,1715c2385,2390
< 	MakeHistLogAndRatio (2, "JetsInvMass");
< 	//MakeHistLogAndRatio (1, "LeadJetEt");
---
> 	
> 
> 
> 	//MakeHistLogAndRatio (1, "NJet");
> 	//MakeHistLogAndRatio (1, "Met");
> 	MakeHistLogAndRatio (1, "LeadJetEt");
1718d2392
< 	MakeHistLogAndRatio (1, "NJet");
