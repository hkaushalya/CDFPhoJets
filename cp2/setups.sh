#!/bin/sh

# Copyright (c) 1998 Universities Research Association, Inc.
#       All Rights Reserved
#
#
# This material resulted from work developed under a Government Contract and
# is subject to the following license:  The Government retains a paid-up,
# nonexclusive, irrevocable worldwide license to reproduce, prepare derivative
# works, perform publicly and display publicly by or for the Government,
# including the right to distribute to other Government contractors.  Neither
# the United States nor the United States Department of Energy, nor any of
# their employees, makes any warranty, express or implied, or assumes any
# legal liability or responsibility for the accuracy, completeness, or
# usefulness of any information, apparatus, product, or process disclosed, or
# represents that its use would not infringe privately owned rights.
#
#
#======================================================================
# The setups.sh script is designed to be sourced at shell invocation
# including the time of login.  It uses several other scripts located in  
# /fnal/ups/etc to determine the 
# PRODUCTS and UPS_DIR environment variables.This script and all the 
# scripts utilized are created when a version of ups is configured.

# This script is sourced by the fermi.sh files to bootstrap the
# ups working environment and aliases.
# If you need to reestablish missing aliases in a subshell process,
# use the following code:
#    . `${UPS_DIR}/bin/ups setup ups`
# 
# NOTE: The '.' in the preceeding line is significant.
#
# The scripts utilized by the setups.sh script are:
# 
#    /fnal/ups/etc/setups_products_init.sh
#
#    /fnal/ups/etc/setups.common,
#    as a last resort.
#
#    /fnal/ups/etc/setups.cache.'<flavor>' 
#    is used to determine the value of UPS_DIR.
#======================================================================
#
# ===		SYS ADMIN AREA		=====
#
# The following shell variables are defined here:
#
#       Setups_Home
#
#       Name_Of_Ups
#
# Please check their values and change, if necessary, following
# their descriptions below.
#
#
# Because the shell languages manage to lose the filename
# of the file being sourced the Setups_Home variable
# exists to assist in installing the codes on non Fermilab
# machines.  Change this to the directory in which the
# setups.* scripts live.
#======================================================================
Setups_Home=/fnal/ups/etc
#======================================================================
# Name_Of_Ups should always be ups at Fermilab, unless in beta test
#======================================================================
Name_Of_Ups=ups

#	Setups_Commands=cat grep ln ls mkdir rm sed wc

BootStrap_Dir=
 	 
# === DO NOT EDIT BELOW THIS LINE === DO NOT REMOVE THIS LINE ===


Setups_Dir_Resolve()
{
#======================================================================
#  This function activated by inclusion of reference to _Make_Setups_Dir_Resolve
#  which is defined in the configure script.
#
#  USAGE:
#
#	Setups_Dir_Resolve Variable_Name Reference_to_be_Resolved
#
#  Where:
#
#	Variable_Name is the name of the SHELL variable to which
#	the resolved path name will be assigned.
#
#	Reference_to_be_Resolved is the path reference which is to
#	be resolved and assigned to Variable_Name. 
#======================================================================
    TeMp=${TMPDIR:-/tmp}
    for shell in bash ksh ash sh
    do
        if test -x /bin/$shell
        then
            AsH=/bin/$shell
            break
        elif test -x /usr/bin/$shell
        then
            AsH=/usr/bin/$shell
            break
        fi
    done
    rm -f $TeMp/ASH$$
    $sed "s%        %%" <<AEoFx >$TeMp/ASH$$
        #!$AsH
        eval Res_dir=\$2
        ${echo} \$Res_dir
AEoFx
    chmod +x $TeMp/ASH$$
    eval $1=`$TeMp/ASH$$ $1 $2`
    rm -f $TeMp/ASH$$;
}


#======================================================================
# Make full path variables for each command in for list
# The for list was generated by expansion of Setups_Commands
# defined when ups was configured.
#======================================================================

#======================================================================
#  This snippet of script was created by inclusion of _Make_Absolute_Path_Commands
#  variable.  Which is defined in the configure script
#======================================================================
for com in cat echo grep ln ls mkdir rm sed wc
do
    if test -x /bin/$com
    then
        cmd=/bin/$com
    elif test -x /usr/bin/$com
    then
        cmd=/usr/bin/$com
    else
        cmd=$com
    fi
    eval $com=$cmd
done
unset com
unset cmd
#======================================================================
#             End of code generated by _Make_Absolute_Path_Commands
#======================================================================


#======================================================================
# Check on the status of /bin/sh which is needed for completion
#======================================================================

error=0
if test ! -d /bin 
then
    echo ERROR - The /bin directory does not exist.
    echo "      " A mount may be required.
    error=1
elif test `$ls -1 /bin|$wc -w` = 0
then
    echo ERROR - The /bin directory is empty.
    echo "      " This is a fatal condition
    echo "      " Contact the system administrator.
    error=1
elif test ! -x /bin/sh 
then
    echo ERROR - The bourne shell - /bin/sh - does not exist.
    echo "      " Ups cannot be set up until this is corrected.
    echo "      " Contact the system administrator.
    error=1
fi

if test `echo $Setups_Home|cut -c1` != '/'
then

    Setups_Dir_Resolve Setups_Home $Setups_Home
fi

export Setups_Home

Setups_Current=1

if test $Setups_Current = 0
then
    Setups_Home=$BootStrap_Dir
fi

SETUPS_DIR=$Setups_Home; export SETUPS_DIR

UPS_SHELL=sh; export UPS_SHELL

#======================================================================
# Determine probable flavor names for the version of ups
# which would execute on this platform.
#======================================================================
Node=`uname -n|cut -f1 -d'.'`
MACH_OS=`uname -s`

if test "${UPS_OVERRIDE:-x}" != x
then
    MACH_OS=`echo $UPS_OVERRIDE | sed -e 's/.*-H \([^ +]*\)+.*/\1/'`
    Full_Flavor=`echo $UPS_OVERRIDE | sed -e 's/.*-H \([^ ]*\).*/\1/'`

elif test -r $SETUPS_DIR/ups_override.$Node
then
    UPS_OVERRIDE=`cat $SETUPS_DIR/ups_override.$Node`
    export UPS_OVERRIDE
    MACH_OS=`echo $UPS_OVERRIDE | sed -e 's/.*-H \([^ +]*\)+.*/\1/'`
    Full_Flavor=`echo $UPS_OVERRIDE | sed -e 's/.*-H \([^ ]*\).*/\1/'`

else
    if test "`echo $MACH_OS|cut -c1-4`" = IRIX
    then
	MACH_OS=IRIX
    fi
    if test "`echo $MACH_OS|cut -c1-4`" = CYGW
    then
	MACH_OS=CYGWIN32_NT
    fi
    export MACH_OS
    Full_Flavor="$MACH_OS"'+'`uname -r|sed -e 's/[ ()].*//'`'.'`uname -v|sed -e 's/[ ()].*//'`
    if test "$MACH_OS" = AIX
    then
	Full_Flavor="$MACH_OS"'+'`uname -v`'.'`uname -r`
    fi
    if test "$MACH_OS" = Linux -o "$MACH_OS" = CYGWIN32_NT
    then
	Full_Flavor="$MACH_OS"'+'`uname -r|sed -e 's/[ ()].*//'`
    fi
fi
for level in 2 3 4 5 6 7 8 9
do
    fl=`echo $Full_Flavor|cut -f1-$level -d'.'`
    if test "$fl" != "$Full_Flavor"
    then
	eval Flavor_$level=$fl
    else
	eval Flavor_$level=''
    fi
done
Flavor=`echo $Full_Flavor | cut -f1 -d'.'`
No_SETUP_UPS=0
if test $error = 0 -a x`echo ${UPS_DIR:-x}|cut -c1` = x/
then
    if test ! -d $UPS_DIR
    then
	unset UPS_DIR
    fi
    if test "${SETUP_UPS:-x}" != x
    	then
	for field in 2 3 4 5 6 7 8
	do
	    f1=`echo $SETUP_UPS|cut -f${field} -d'-'`
	    if test "${f1:-x}" = "x"
	    then
		break
	    fi
	    if test `echo $f1|cut -c1` = f
	    then
		Ups_Flavor=`echo $f1|cut -f2 -d' '`
		break
	    fi
	done

	if test x`echo $Full_Flavor | $grep ${Ups_Flavor:-} 2>/dev/null` = x
	then
	    unset UPS_DIR
	    No_SETUP_UPS=1
#		    unset SETUP_UPS
	fi
	unset f1
	unset Ups_Flavor
    fi
else
	unset UPS_DIR
fi
#====================================================================== 
# Don't trust the PRODUCTS variable if SETUP_UPS is not defined
#======================================================================
if test $No_SETUP_UPS = 1 -o x = "${SETUP_UPS:-x}"
then
    unset PRODUCTS
fi
#======================================================================
# Attempt to define the PRODUCTS variable.
#======================================================================
if test $error = 0 -a x`echo ${PRODUCTS:-}|cut -c1` != x/
then
    if test -x ${Setups_Home}/setups_products_init.sh 
    then
        eval `(unset ENV;${Setups_Home}/setups_products_init.sh)`
    fi   
fi
#======================================================================
# Attempt to determine the file name of the cached ups information from the 
# naming convention and the probable flavors which might execute correctly
# on the platform executing this script.  If found, utilize it to define
# a UPS_DIR.
#======================================================================
if test x`echo ${PRODUCTS:-}|cut -c1` = x/ -a ${UPS_DIR:-x} = x
then
    for fl in "$Node" "$Full_Flavor" "$Flavor_9" "$Flavor_8" "$Flavor_7" "$Flavor_6" "$Flavor_5" "$Flavor_4" "$Flavor_3" "$Flavor_2" "$Flavor" "$MACH_OS" NULL
    do
        if test -f $Setups_Home/set${Name_Of_Ups}.cache.${fl}
        then
            UPS_DIR=`$cat $Setups_Home/set${Name_Of_Ups}.cache.${fl}|$grep -v '^#'`
        fi
        if test ${UPS_DIR:-x} != x
        then
            if test -d $UPS_DIR
            then
                break
            else
                unset UPS_DIR
            fi
        fi
   done
fi
#======================================================================
# If we have been unsuccessful so far, search the possible products 
# databases for some ups which might execute on this platform.
#
# This process, although thorough, is very time consuming.
#======================================================================
if test $error = 0 -a ${UPS_DIR:-x} = x
then
    if test -x $Setups_Home/setups.common
    then
        eval `(unset ENV;$Setups_Home/setups.common sh)`
    fi
fi
if test ${UPS_DIR:-x} != x
then
#======================================================================
# If we have successfully managed to find a usable version of ups,
# give this version of ups the information  found so far and let it 
# determine the BEST version.
#
# This extra step ensures that the appropriate ups search order is
# followed to arive at the final result.  It also is the step executed even
# when PRODUCTS and UPS_DIR are known at entry.  The ups setup script
# may define functions which are NOT inherited by sub-shells.
#======================================================================
    if test $No_SETUP_UPS = 0 -a "${SETUP_UPS:-x}" != x
    then
	. `$UPS_DIR/bin/ups setup $SETUP_UPS`
    else
	. `$UPS_DIR/bin/ups setup $Name_Of_Ups`
    fi
else
#======================================================================
# If everything failed, report same and return.
#
# DO NOT EXIT - this might be the login shell.
#======================================================================
	echo '****'
	echo '**** Unable to initialize UPSII environment'
	echo '****'
fi
#======================================================================
# Because this is designed to be "sourced", its nice to unset the shell
# variables.
#======================================================================
unset cat grep ln ls mkdir rm sed wc Setups_Commands error f1 field Full_Flavor Flavor_2 
unset Flavor_3 Flavor_4 Flavor_5 Flavor_6 Flavor_7 Flavor_8 Flavor_9
unset No_SETUP_UPS
unset Node BootStrap_Dir Setups_Current fl Flavor Setups_Home Name_Of_Ups
# OSF1 /bin/sh leaves /tmp/shNNNNN files if you unset functions
if [ "$MACH_OS" != OSF1 ] 
then
   unset Setups_Dir_Resolve
fi

